generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

model Workout {
    id        String            @id @default(uuid())
    duration  Int
    createdAt DateTime          @default(now())
    userId    String
    exercises WorkoutExercise[]
}

model Exercise {
    id                      String                    @id @default(uuid())
    name                    String
    muscleGroup             String?
    iconUrl                 String?
    createdAt               DateTime                  @default(now())
    updatedAt               DateTime                  @updatedAt
    workouts                WorkoutExercise[]
    WorkoutTemplateExercise WorkoutTemplateExercise[]
}

model WorkoutExercise {
    id         String     @id @default(uuid())
    workout    Workout    @relation(fields: [workoutId], references: [id], onDelete: Cascade)
    workoutId  String
    exercise   Exercise   @relation(fields: [exerciseId], references: [id], onDelete: Cascade)
    exerciseId String
    sets       SetEntry[]
}

model SetEntry {
    id                String          @id @default(uuid())
    kg                Int
    reps              Int
    workoutExercise   WorkoutExercise @relation(fields: [workoutExerciseId], references: [id], onDelete: Cascade)
    workoutExerciseId String
}

model UserNutritionGoals {
    id        String   @id @default(uuid())
    userId    String   @unique
    calories  Int
    protein   Int
    carbs     Int
    fat       Int
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model FoodEntry {
    id       String   @id @default(uuid())
    userId   String
    name     String
    kcal     Int
    protein  Float
    carbs    Float
    fat      Float
    quantity Float
    date     DateTime @default(now())
}

model WorkoutTemplate {
    id        String                    @id @default(uuid())
    userId    String
    name      String
    exercises WorkoutTemplateExercise[]
    createdAt DateTime                  @default(now())
}

model WorkoutTemplateExercise {
    id         String          @id @default(uuid())
    template   WorkoutTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
    templateId String
    exercise   Exercise        @relation(fields: [exerciseId], references: [id])
    exerciseId String
}
